#+title: Part01

* ReactJS
[[https://reactjs.org][ReactJS]] is a JavaScript library for building user interfaces. It builds upon the
idea of having *indenpendent, reusable components* that know how to render
themselves and that manages their own state.

Components accept arbitrary input -- =props= in React lingo -- and return React
elements describing how it should be displayed on screen. Elements are
immutable: they represent the UI in a certain point in time. When updating the
UI, React is smart enough to just render what has actually changed.

** JSX
ReactJS introduces a syntax extension to JavaScript called JSX. It allow us to
declare React Elements using a syntax that resembles HTML, but can also contain
JS expressions.

#+begin_src javascript
const Greeting = (props) => {
  return (
    <div>
      <p>Hello {props.name}</p>
    </div>
  );
}
#+end_src

** State & Hooks
Components often are rendered according to some internal, private state. When
this state changes we need a way to update the UI. To solve this problem, modern
React introduced the concept of [[https://reactjs.org/docs/hooks-intro.html][Hooks]]. They are defined as "functions that let
you “hook into” React state and lifecycle features from function components".

In React, data flow is *unidirectional*: state is owned by a specific component
and can only flow to components "below" them in the tree. There is only a single
"source of truth" for any changing state.
